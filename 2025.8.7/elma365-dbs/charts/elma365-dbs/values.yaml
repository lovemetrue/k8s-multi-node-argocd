global:
  postgresql:
    enabled: true
  mongodb:
    enabled: true
  redis:
    enabled: false
  valkey:
    enabled: true
  redis-cluster:
    enabled: false
  rabbitmq:
    enabled: true
  minio:
    enabled: true
  elasticsearch:
    enabled: false

postgresql:
  fullnameOverride: postgres
  image:
    registry: hub.elma365.tech
    repository: docker/databases/postgres
    tag: "15.4.0-debian-11-r45"
    pullSecrets:
      - yandexsecret-dbs
  volumePermissions:
    enabled: true
    image:
      registry: hub.elma365.tech
      repository: docker/toolkit/os-shell
      tag: 11-debian-11-r103
  auth:
    enablePostgresUser: true
    database: elma365
    username: postgres
    password: pgpassword
    postgresPassword: pgpassword
  primary:
    initdb:
      args: "--data-checksums"
      scripts:
        00_init_extensions.sql: |
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    persistence:
      enabled: true
      size: 100Gi
    resources:
      limits: {}
      requests: {}
    extendedConfiguration: |
      max_connections = 2000
      max_locks_per_transaction = 512
    podAnnotations:
      linkerd.io/inject: disabled

rabbitmq:
  fullnameOverride: rabbitmq
#  featureFlags: "quorum_queue"
  image:
    registry: hub.elma365.tech
    repository: docker/databases/rabbitmq
    tag: "3.13.7-debian-12-r2"
    pullSecrets:
      - yandexsecret-dbs
  auth:
    erlangCookie: zk8Jdo2Kzz4ql
    username: elma365
  loadDefinition:
    enabled: false
  persistence:
    enabled: true
    size: 5Gi
  volumePermissions:
    enabled: true
    image:
      registry: hub.elma365.tech
      repository: docker/toolkit/os-shell
      tag: 12-debian-12-r28
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 120
    timeoutSeconds: 20
    periodSeconds: 30
    failureThreshold: 10
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 30
    failureThreshold: 10
    successThreshold: 1
  podAnnotations:
    linkerd.io/inject: disabled
  extraConfiguration: |-
    default_vhost = elma365
    default_permissions.configure = .*
    default_permissions.read = .*
    default_permissions.write = .*
  extraPlugins: >-
    rabbitmq_auth_backend_ldap

mongodb:
  fullnameOverride: mongo
  image:
    registry: hub.elma365.tech
    repository: docker/databases/mongodb
    tag: "6.0.10-debian-11-r8"
    pullSecrets:
      - yandexsecret-dbs
  architecture: replicaset
  replicaCount: 1
  arbiter:
    enabled: false
    podAnnotations:
      linkerd.io/inject: disabled
  service:
    portName: mongo
  auth:
    username: elma365
    database: elma365
    replicaSetKey: d8Ksj26Mzi88H
  persistence:
    enabled: true
    size: 20Gi
  volumePermissions:
    enabled: true
    image:
      registry: hub.elma365.tech
      repository: docker/toolkit/os-shell
      tag: 11-debian-11-r103
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 40
    timeoutSeconds: 20
    failureThreshold: 10
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 10
    successThreshold: 1
  podAnnotations:
    linkerd.io/inject: disabled

redis:
  fullnameOverride: redis
  image:
    registry: hub.elma365.tech
    repository: docker/databases/redis
    tag: "7.4.0-debian-12-r2"
    pullSecrets:
      - yandexsecret-dbs
  commonLabels:
    app: redis
  architecture: standalone
  auth:
    enabled: false
  commonConfiguration: |-
    maxclients 20000
  volumePermissions:
    enabled: true
    image:
      registry: hub.elma365.tech
      repository: docker/toolkit/os-shell
      tag: 11-debian-11-r103
  master:
    extraFlags:
      - "--maxmemory-policy allkeys-lfu"
    persistence:
      size: 10Gi
    resources:
      limits: {}
      requests: {}
    podAnnotations:
      linkerd.io/inject: disabled
  replica:
    replicaCount: 1
    persistence:
      size: 10Gi
    resources:
      limits: {}
      requests: {}
    podAnnotations:
      linkerd.io/inject: disabled
  sentinel:
    image:
      registry: hub.elma365.tech
      repository: docker/databases/redis-sentinel
      tag: 7.4.0-debian-12-r2

valkey:
  fullnameOverride: valkey
  global:
    security:
      allowInsecureImages: true
  image:
    registry: hub.elma365.tech
    repository: docker/databases/valkey
    tag: "8.1.1-debian-12-r0"
    pullSecrets:
      - yandexsecret-dbs
  commonLabels:
    app: valkey
  architecture: standalone
  auth:
    enabled: false
  commonConfiguration: |-
    maxclients 20000
  volumePermissions:
    enabled: true
    image:
      registry: hub.elma365.tech
      repository: docker/toolkit/os-shell
      tag: 12-debian-12-r43
  primary:
    extraFlags:
      - "--maxmemory-policy allkeys-lfu"
    persistence:
      size: 10Gi
    resources:
      limits: {}
      requests: {}
    podAnnotations:
      linkerd.io/inject: disabled
  replica:
    replicaCount: 1
    persistence:
      size: 10Gi
    resources:
      limits: {}
      requests: {}
    podAnnotations:
      linkerd.io/inject: disabled
  sentinel:
    primarySet: myprimary
    image:
      registry: hub.elma365.tech
      repository: docker/databases/valkey-sentinel
      tag: 8.1.1-debian-12-r0

redis-cluster:
  fullnameOverride: redis-cluster
  image:
    registry: hub.elma365.tech
    repository: docker/databases/redis-cluster
    tag: "7.4.0-debian-12-r2"
    pullSecrets:
      - yandexsecret-dbs
  commonLabels:
    app: redis-cluster
  volumePermissions:
    enabled: true
    image:
      registry: hub.elma365.tech
      repository: docker/toolkit/os-shell
      tag: 11-debian-11-r103
  persistence:
    size: 10Gi
  resources:
    limits: {}
    requests: {}
  redis:
    configmap: |-
      maxclients 20000
      maxmemory-policy allkeys-lfu
    podAnnotations:
      linkerd.io/inject: disabled
  cluster:
    init: true
    nodes: 6
    replicas: 1

minio:
  fullnameOverride: minio
  image:
    registry: hub.elma365.tech
    repository: docker/databases/minio
    tag: "2022.8.8-debian-11-r0"
    pullSecrets:
      - yandexsecret-dbs
  commonLabels:
    app: minio
  auth:
    rootUser: "PZSF73JG72Ksd955JKU1HIA"
    rootPassword: "aFDkj28Jbs2JKbnvJH678MNwiz88zKjsuNBHHs"
  persistence:
    enabled: true
    size: 100Gi
  volumePermissions:
    enabled: true
    image:
      registry: hub.elma365.tech
      repository: docker/toolkit/os-shell
      tag: 11-debian-11-r103
  apiIngress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # kubernetes.io/ingress.allow-http: "false"
      # kubernetes.io/ingress.global-static-ip-name: ""
      # nginx.ingress.kubernetes.io/secure-backends: "true"
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    # nginx.ingress.kubernetes.io/whitelist-source-range: 0.0.0.0/0
    extraHosts:
      - name: ""
        path: /s3elma365
  disableWebUI: true
  defaultBuckets: s3elma365
  serviceAccount:
    create: false
  service:
    ports:
      api: 80
  gateway:
    enabled: false
    replicaCount: 1
    auth:
      s3:
        accessKey: "PZSF73JG72Ksd955JKU1HIA"
        secretKey: "aFDkj28Jbs2JKbnvJH678MNwiz88zKjsuNBHHs"
        serviceEndpoint: "http://example.ru:9000"
  resources:
    limits: {}
    requests: {}
  podAnnotations:
    linkerd.io/inject: disabled

elasticsearch:
  fullnameOverride: "elasticsearch"
  image: "hub.elma365.tech/elma365/onpremise/elma-assistant/elasticsearch"
  imageTag: "7.9.3"
  imagePullPolicy: "IfNotPresent"
  imagePullSecrets:
    - name: yandexsecret-dbs
  replicas: 1
  minimumMasterNodes: 1
