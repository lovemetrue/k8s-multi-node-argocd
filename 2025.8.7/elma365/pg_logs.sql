c_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:18:53 UTC [9202-106] 127.0.0.1(36116) elma365@elma365 LOG:  statement: SET application_name='telemetrist';
2025-10-10 13:18:53 UTC [9264-84] 127.0.0.1(41980) elma365@elma365 LOG:  statement: SET application_name='telemetrist';
2025-10-10 13:18:53 UTC [9202-107] 127.0.0.1(36116) elma365@elma365 LOG:  statement: SELECT data FROM "head"."_telemetry_kv" WHERE key =  'telemetrist:metric:settings' ;
2025-10-10 13:18:53 UTC [9264-85] 127.0.0.1(41980) elma365@elma365 LOG:  statement: SELECT data FROM "head"."_telemetry_kv" WHERE key =  'telemetrist:metric:settings' ;
2025-10-10 13:18:53 UTC [9231-157] 127.0.0.1(36316) elma365@elma365 LOG:  statement: -- ping
2025-10-10 13:18:53 UTC [9231-158] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:53 UTC [9231-159] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:53 UTC [1095-319] 127.0.0.1(38054) elma365@elma365 LOG:  statement: SET application_name='auth';
2025-10-10 13:18:53 UTC [1340-138] 127.0.0.1(59792) elma365@elma365 LOG:  statement: SET application_name='auth';
2025-10-10 13:18:53 UTC [1340-139] 127.0.0.1(59792) elma365@elma365 LOG:  statement: SELECT body, invite_code, invite_expired_at FROM "head"."users" WHERE (body#>>'{__deletedAt}') IS NULL AND id =  '2bd76aca-2c59-488c-a289-0b5be0c00da2' 
2025-10-10 13:18:53 UTC [1095-320] 127.0.0.1(38054) elma365@elma365 LOG:  statement: SELECT body, invite_code, invite_expired_at FROM "head"."users" WHERE (body#>>'{__deletedAt}') IS NULL AND id =  '2bd76aca-2c59-488c-a289-0b5be0c00da2' 
2025-10-10 13:18:53 UTC [9389-109] 127.0.0.1(37324) elma365@elma365 LOG:  statement: SET application_name='event-bus';
2025-10-10 13:18:53 UTC [9389-110] 127.0.0.1(37324) elma365@elma365 LOG:  statement: -- ping
2025-10-10 13:18:53 UTC [9389-111] 127.0.0.1(37324) elma365@elma365 LOG:  statement: SELECT runtime.entity_namespace, runtime.expired_at, runtime.filter_type, COALESCE(draft.name, runtime.name) AS name, runtime.updated_at, runtime.filter_state, runtime.created_at, runtime.handler_data, runtime.entity_code, runtime.updated_by, runtime.owner, runtime.id, runtime.handler_type, runtime.entity_id, runtime.event, runtime.created_by, runtime.namespace FROM "head"."eventbus_subscriptions" runtime LEFT JOIN "head"."eventbus_subscriptions_draft" draft ON draft.id = runtime.id WHERE (runtime.entity_code IN ( 'users' , '' ) AND runtime.entity_id IN ( '2bd76aca-2c59-488c-a289-0b5be0c00da2' , '' ) AND runtime.entity_namespace IN ( 'system' , '' ) AND runtime.event IN ( 'authorization_success' , '' ) AND (runtime.expired_at IS NULL OR runtime.expired_at >=  '2025-10-10 13:18:53.316455Z' ) AND (runtime.filter_type =  'manual'  OR (runtime.filter_type =  'by_script'  AND runtime.owner IS NOT NULL AND runtime.owner <>  '00000000-0000-0000-0000-000000000000' )))
2025-10-10 13:18:53 UTC [9203-101] 127.0.0.1(36132) elma365@elma365 LOG:  statement: SET application_name='integrations';
2025-10-10 13:18:53 UTC [9203-102] 127.0.0.1(36132) elma365@elma365 LOG:  statement: -- ping
2025-10-10 13:18:53 UTC [9203-103] 127.0.0.1(36132) elma365@elma365 LOG:  statement: SELECT id FROM "head"."extensions" WHERE ((body#>>'{enabled}')::boolean) =  't' 
2025-10-10 13:18:53 UTC [1173-159] 127.0.0.1(54634) elma365@elma365 LOG:  statement: SET application_name='settings';
2025-10-10 13:18:53 UTC [1173-160] 127.0.0.1(54634) elma365@elma365 LOG:  statement: SELECT code, enabled FROM "head"."feature_flags"
2025-10-10 13:18:53 UTC [1173-161] 127.0.0.1(54634) elma365@elma365 LOG:  statement: SELECT code, enabled FROM "public"."feature_flags"
2025-10-10 13:18:53 UTC [935-2680] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:18:53 UTC [9231-160] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:53 UTC [9227-85] 127.0.0.1(36278) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:53 UTC [9227-86] 127.0.0.1(36278) elma365@elma365 LOG:  statement: SET application_name='exchangeSrv';
2025-10-10 13:18:53 UTC [9227-87] 127.0.0.1(36278) elma365@elma365 LOG:  statement: SELECT id, code, name, namespaces, content, settings, description FROM "head"."solutions" ORDER BY name
2025-10-10 13:18:53 UTC [9227-88] 127.0.0.1(36278) elma365@elma365 LOG:  statement: SELECT id, version, public FROM "head"."versions" WHERE code =  'custom'  AND entity =  'solution'  AND namespace =  'global'  AND service =  'exchangeSrv'  ORDER BY (version ->> 'updatedAt')::timestamptz
2025-10-10 13:18:53 UTC [9231-161] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:53 UTC [9231-162] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:53 UTC [9227-89] 127.0.0.1(36278) elma365@elma365 LOG:  statement: SELECT id, version, public FROM "head"."versions" WHERE code =  'servicedesk2'  AND entity =  'solution'  AND namespace =  'global'  AND service =  'exchangeSrv'  ORDER BY (version ->> 'updatedAt')::timestamptz
2025-10-10 13:18:53 UTC [9382-58] 127.0.0.1(37310) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:53 UTC [9382-59] 127.0.0.1(37310) elma365@elma365 LOG:  statement: SET application_name='settings';
2025-10-10 13:18:53 UTC [9382-60] 127.0.0.1(37310) elma365@elma365 LOG:  statement: begin isolation level read committed read only
2025-10-10 13:18:53 UTC [9382-61] 127.0.0.1(37310) elma365@elma365 LOG:  statement: SELECT id, body FROM "head"."settings" WHERE id =  '00000000-0000-0000-0000-000000000000'  OR id ILIKE  '__ns:%' 
2025-10-10 13:18:53 UTC [1090-385] 127.0.0.1(38044) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:53 UTC [1090-386] 127.0.0.1(38044) elma365@elma365 LOG:  statement: SET application_name='settings';
2025-10-10 13:18:53 UTC [1090-387] 127.0.0.1(38044) elma365@elma365 LOG:  statement: begin isolation level read committed read only
2025-10-10 13:18:53 UTC [1090-388] 127.0.0.1(38044) elma365@elma365 LOG:  statement: SELECT id, body FROM "head"."settings" WHERE id IN ( '00000000-0000-0000-0000-000000000000' ,  '00000000-0000-0000-0000-000000000000' )
2025-10-10 13:18:53 UTC [9382-62] 127.0.0.1(37310) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:53 UTC [1090-389] 127.0.0.1(38044) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:53 UTC [9231-163] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:53 UTC [9389-112] 127.0.0.1(37324) elma365@elma365 LOG:  statement: SELECT runtime.created_by, runtime.filter_type, runtime.entity_namespace, COALESCE(draft.name, runtime.name) AS name, runtime.entity_code, runtime.id, runtime.handler_type, runtime.entity_id, runtime.created_at, runtime.updated_at, runtime.updated_by, runtime.filter_state, runtime.owner, runtime.namespace, runtime.event, runtime.expired_at, runtime.handler_data FROM "head"."eventbus_subscriptions" runtime LEFT JOIN "head"."eventbus_subscriptions_draft" draft ON draft.id = runtime.id WHERE (runtime.entity_code IN ( 'users' , '' ) AND runtime.entity_id IN ( '2bd76aca-2c59-488c-a289-0b5be0c00da2' , '' ) AND runtime.entity_namespace IN ( 'system' , '' ) AND runtime.event IN ( 'authorization_success' , '' ) AND (runtime.expired_at IS NULL OR runtime.expired_at >=  '2025-10-10 13:18:53.39524Z' ) AND (runtime.filter_type =  'manual'  OR (runtime.filter_type =  'by_script'  AND runtime.owner IS NOT NULL AND runtime.owner <>  '00000000-0000-0000-0000-000000000000' )))
2025-10-10 13:18:53 UTC [9214-35] 127.0.0.1(36194) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:53 UTC [9214-36] 127.0.0.1(36194) elma365@elma365 LOG:  statement: SET application_name='exchangeSrv';
2025-10-10 13:18:53 UTC [9214-37] 127.0.0.1(36194) elma365@elma365 LOG:  statement: SELECT id, code, name, namespaces, content, settings, description FROM "head"."solutions" ORDER BY name
2025-10-10 13:18:53 UTC [9231-164] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:53 UTC [1154-161] 127.0.0.1(54628) elma365@elma365 LOG:  statement: -- ping
2025-10-10 13:18:53 UTC [9205-74] 127.0.0.1(36136) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:53 UTC [9205-75] 127.0.0.1(36136) elma365@elma365 LOG:  statement: SET application_name='integrations';
2025-10-10 13:18:53 UTC [9205-76] 127.0.0.1(36136) elma365@elma365 LOG:  statement: SELECT (body) FROM "head"."extensions" ORDER BY (body#>>'{__name}')
2025-10-10 13:18:53 UTC [9226-73] 127.0.0.1(36268) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:53 UTC [1154-162] 127.0.0.1(54628) elma365@elma365 LOG:  statement: SELECT id, user_id, type, session_info, created_at, expired_at, hash FROM "head"."sessions" WHERE type =  'general'  AND id =  '5f4402d5-1487-47b4-8b5c-dbbd60b87f7f'  ORDER BY user_id, expired_at
2025-10-10 13:18:53 UTC [9226-74] 127.0.0.1(36268) elma365@elma365 LOG:  statement: SET application_name='main';
2025-10-10 13:18:53 UTC [9226-75] 127.0.0.1(36268) elma365@elma365 LOG:  statement: -- ping
2025-10-10 13:18:53 UTC [9226-76] 127.0.0.1(36268) elma365@elma365 LOG:  statement: SELECT id, user_id, type, session_info, created_at, expired_at, hash FROM "head"."sessions" WHERE type =  'general'  AND id =  '79d18a48-0d1d-4871-a1ef-8dfbd25a3f96'  ORDER BY user_id, expired_at
2025-10-10 13:18:53 UTC [9231-165] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:53 UTC [9231-166] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:53 UTC [9382-63] 127.0.0.1(37310) elma365@elma365 LOG:  statement: begin isolation level read committed read only
2025-10-10 13:18:53 UTC [9382-64] 127.0.0.1(37310) elma365@elma365 LOG:  statement: SELECT id, body || jsonb_build_object('_id', id) as "body" FROM "head"."settings" WHERE id =  '00000000-0000-0000-0000-000000000000'  OR (
        id ILIKE  '__ns:ext_%'  AND
        jsonb_extract_path(body, 'values', '_enabled')::bool = true AND
        jsonb_extract_path_text(body, 'values', '_languageSettings', 'localeInfo', 'code')::text =  'ru-RU' )
2025-10-10 13:18:53 UTC [9382-65] 127.0.0.1(37310) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:53 UTC [1286-353] 192.168.39.17(64245) elma365@elma365 LOG:  statement: ;
2025-10-10 13:18:53 UTC [1286-354] 192.168.39.17(64245) elma365@elma365 LOG:  statement: SELECT version();
2025-10-10 13:18:53 UTC [1286-355] 192.168.39.17(64245) elma365@elma365 LOG:  statement: SELECT name, setting, COALESCE(unit, ''), short_desc, vartype FROM pg_settings WHERE vartype IN ('bool', 'integer', 'real') AND name != 'sync_commit_cancel_wait';
2025-10-10 13:18:53 UTC [1286-356] 192.168.39.17(64245) elma365@elma365 LOG:  statement: 
                                SELECT *,
                                        (case pg_is_in_recovery() when 't' then pg_last_wal_receive_lsn() else pg_current_wal_lsn() end) AS pg_current_wal_lsn,
                                        (case pg_is_in_recovery() when 't' then pg_wal_lsn_diff(pg_last_wal_receive_lsn(), pg_lsn('0/0'))::float else pg_wal_lsn_diff(pg_current_wal_lsn(), pg_lsn('0/0'))::float end) AS pg_current_wal_lsn_bytes,
                                        (case pg_is_in_recovery() when 't' then pg_wal_lsn_diff(pg_last_wal_receive_lsn(), replay_lsn)::float else pg_wal_lsn_diff(pg_current_wal_lsn(), replay_lsn)::float end) AS pg_wal_lsn_diff
                                FROM pg_stat_replication

2025-10-10 13:18:53 UTC [1286-357] 192.168.39.17(64245) elma365@elma365 LOG:  statement: 
                                SELECT slot_name, database, active,
                                        (case pg_is_in_recovery() when 't' then pg_wal_lsn_diff(pg_last_wal_receive_lsn(), restart_lsn) else pg_wal_lsn_diff(pg_current_wal_lsn(), restart_lsn) end) as pg_wal_lsn_diff
                                FROM pg_replication_slots

2025-10-10 13:18:53 UTC [1286-358] 192.168.39.17(64245) elma365@elma365 LOG:  statement: 
                                SELECT *,
                                        extract(epoch from now() - last_archived_time) AS last_archive_age
                                FROM pg_stat_archiver

2025-10-10 13:18:53 UTC [1286-359] 192.168.39.17(64245) elma365@elma365 LOG:  statement: 
                                SELECT
                                        pg_database.datname,
                                        tmp.state,
                                        tmp2.usename,
                                        tmp2.application_name,
                                        COALESCE(count,0) as count,
                                        COALESCE(max_tx_duration,0) as max_tx_duration
                                FROM
                                        (
                                          VALUES ('active'),
                                                         ('idle'),
                                                         ('idle in transaction'),
                                                         ('idle in transaction (aborted)'),
                                                         ('fastpath function call'),
                                                         ('disabled')
                                        ) AS tmp(state) CROSS JOIN pg_database
                                LEFT JOIN
                                (
                                        SELECT
                                                datname,
                                                state,
                                                usename,
                                                application_name,
                                                count(*) AS count,
                                                MAX(EXTRACT(EPOCH FROM now() - xact_start))::float AS max_tx_duration
                                        FROM pg_stat_activity GROUP BY datname,state,usename,application_name) AS tmp2
                                        ON tmp.state = tmp2.state AND pg_database.datname = tmp2.datname

2025-10-10 13:18:53 UTC [1286-360] 192.168.39.17(64245) elma365@elma365 LOG:  statement: SELECT * FROM pg_stat_database_conflicts;
2025-10-10 13:18:53 UTC [13945-1] 192.168.39.17(20943) elma365@elma365 LOG:  statement: SELECT version();
2025-10-10 13:18:53 UTC [13945-2] 192.168.39.17(20943) elma365@elma365 LOG:  statement: 
                        SELECT 
                          pg_database.datname as datname,
                          tmp.mode as mode,
                          COALESCE(count, 0) as count 
                        FROM 
                          (
                            VALUES 
                              ('accesssharelock'), 
                              ('rowsharelock'), 
                              ('rowexclusivelock'), 
                              ('shareupdateexclusivelock'), 
                              ('sharelock'), 
                              ('sharerowexclusivelock'), 
                              ('exclusivelock'), 
                              ('accessexclusivelock'), 
                              ('sireadlock')
                          ) AS tmp(mode)
                          CROSS JOIN pg_database 
                          LEFT JOIN (
                            SELECT 
                              database, 
                              lower(mode) AS mode, 
                              count(*) AS count 
                            FROM 
                              pg_locks 
                            WHERE 
                              database IS NOT NULL 
                            GROUP BY 
                              database, 
                              lower(mode)
                          ) AS tmp2 ON tmp.mode = tmp2.mode 
                          and pg_database.oid = tmp2.database 
                        ORDER BY 
                          1

2025-10-10 13:18:53 UTC [13945-3] 192.168.39.17(20943) elma365@elma365 LOG:  statement: SELECT pg_roles.rolname, pg_roles.rolconnlimit FROM pg_roles
2025-10-10 13:18:53 UTC [13945-4] 192.168.39.17(20943) elma365@elma365 LOG:  statement: SELECT datid,datname,numbackends,xact_commit,xact_rollback,blks_read,blks_hit,tup_returned,tup_fetched,tup_inserted,tup_updated,tup_deleted,conflicts,temp_files,temp_bytes,deadlocks,blk_read_time,blk_write_time,stats_reset,active_time FROM pg_stat_database;
2025-10-10 13:18:53 UTC [13945-5] 192.168.39.17(20943) elma365@elma365 LOG:  statement: SELECT pg_database.datname, pg_database.datconnlimit FROM pg_database;
2025-10-10 13:18:53 UTC [13945-6] 192.168.39.17(20943) elma365@elma365 LOG:  execute <unnamed>: SELECT pg_database_size($1)
2025-10-10 13:18:53 UTC [13945-7] 192.168.39.17(20943) elma365@elma365 DETAIL:  parameters: $1 = 'template0'
2025-10-10 13:18:53 UTC [13945-8] 192.168.39.17(20943) elma365@elma365 LOG:  execute <unnamed>: SELECT pg_database_size($1)
2025-10-10 13:18:53 UTC [13945-9] 192.168.39.17(20943) elma365@elma365 DETAIL:  parameters: $1 = 'template1'
2025-10-10 13:18:53 UTC [13945-10] 192.168.39.17(20943) elma365@elma365 LOG:  execute <unnamed>: SELECT pg_database_size($1)
2025-10-10 13:18:53 UTC [13945-11] 192.168.39.17(20943) elma365@elma365 DETAIL:  parameters: $1 = 'postgres'
2025-10-10 13:18:53 UTC [13945-12] 192.168.39.17(20943) elma365@elma365 LOG:  execute <unnamed>: SELECT pg_database_size($1)
2025-10-10 13:18:53 UTC [13945-13] 192.168.39.17(20943) elma365@elma365 DETAIL:  parameters: $1 = 'elma365'
2025-10-10 13:18:53 UTC [9382-66] 127.0.0.1(37310) elma365@elma365 LOG:  statement: begin isolation level read committed read only
2025-10-10 13:18:53 UTC [9382-67] 127.0.0.1(37310) elma365@elma365 LOG:  statement: SELECT id, body || jsonb_build_object('_id', id) as "body" FROM "head"."settings" WHERE id =  '00000000-0000-0000-0000-000000000000'  OR (
        id ILIKE  '__ns:ext_%'  AND
        jsonb_extract_path(body, 'values', '_enabled')::bool = true AND
        jsonb_extract_path_text(body, 'values', '_languageSettings', 'localeInfo', 'code')::text =  'ru-RU' )
2025-10-10 13:18:53 UTC [9231-167] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:53 UTC [9382-68] 127.0.0.1(37310) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:53 UTC [13945-14] 192.168.39.17(20943) elma365@elma365 LOG:  execute <unnamed>: SELECT pg_database_size($1)
2025-10-10 13:18:53 UTC [13945-15] 192.168.39.17(20943) elma365@elma365 DETAIL:  parameters: $1 = 'audit'
2025-10-10 13:18:53 UTC [9266-41] 127.0.0.1(41996) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:53 UTC [9266-42] 127.0.0.1(41996) elma365@elma365 LOG:  statement: SET application_name='main';
2025-10-10 13:18:53 UTC [9266-43] 127.0.0.1(41996) elma365@elma365 LOG:  statement: SELECT id, user_id, type, session_info, created_at, expired_at, hash FROM "head"."sessions" WHERE type =  'general'  AND id =  '6c12e7da-77a1-5cd3-8f6a-af440a358312'  ORDER BY user_id, expired_at
2025-10-10 13:18:53 UTC [9266-44] 127.0.0.1(41996) elma365@elma365 LOG:  statement: UPDATE "head"."sessions" SET expired_at =  '2025-10-10 13:21:53.891006Z' , hash =  '31c29247b1b8c47efcf10b6922d30c13cfb978b08587efde69653cda3ace8300' , session_info = session_info || '{"last_active_at": "2025-10-10T13:18:53Z"}'::jsonb WHERE id =  '6c12e7da-77a1-5cd3-8f6a-af440a358312' 
2025-10-10 13:18:54 UTC [9231-168] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [9230-127] 127.0.0.1(36306) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:54 UTC [9230-128] 127.0.0.1(36306) elma365@elma365 LOG:  statement: SET application_name='balancer';
2025-10-10 13:18:54 UTC [9230-129] 127.0.0.1(36306) elma365@elma365 LOG:  statement: -- ping
2025-10-10 13:18:54 UTC [9230-130] 127.0.0.1(36306) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [9203-104] 127.0.0.1(36132) elma365@elma365 LOG:  statement: SELECT body FROM "head"."integrations"
2025-10-10 13:18:54 UTC [9203-105] 127.0.0.1(36132) elma365@elma365 LOG:  statement: SELECT (body) FROM "head"."extensions" WHERE body->'contracts' ? 'voip' AND ((body#>>'{enabled}')::boolean) =  't'  AND (body#>>'{deletedAt}') IS NULL
2025-10-10 13:18:54 UTC [9230-131] 127.0.0.1(36306) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [9231-169] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [9203-106] 127.0.0.1(36132) elma365@elma365 LOG:  statement: SELECT id FROM "head"."extensions" WHERE ((body#>>'{enabled}')::boolean) =  't' 
2025-10-10 13:18:54 UTC [9211-88] 127.0.0.1(36180) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:54 UTC [9211-89] 127.0.0.1(36180) elma365@elma365 LOG:  statement: SET application_name='widget';
2025-10-10 13:18:54 UTC [9211-90] 127.0.0.1(36180) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:18:54 UTC [9211-91] 127.0.0.1(36180) elma365@elma365 LOG:  statement: SELECT body FROM "head"."widgets" WHERE (("head"."widgets".body#>>'{__deletedAt}') IS NULL AND (("head"."widgets".body#>>'{version}')::integer) >  '0'  AND (("head"."widgets".body#>>'{namespace}') IN ( 'ext_ab4e8797-6ecc-4134-bda9-0e6f16afd05a' , 'ext_c75a28ae-4898-4e83-acc0-b6e21e6c6012' , 'ext_d3d97ef4-6290-4d0e-b359-bc7daa6de0b8' , 'ext_d59f7d87-e046-4971-87ad-060f869165ea' , 'ext_f799c4b4-f50b-4918-9f3d-5ec5a06d148e' , 'ext_3d37e007-ce67-4672-9fd9-1f477e9e4fe4' , 'ext_06859a98-d576-49ff-9b35-b1909cd9eaf2' , 'ext_1f2e892a-911e-40e9-90fd-2015a5421335' , 'ext_7a844dcc-2371-4aa2-8544-de57c69eb660' , 'ext_8c227577-684e-44cf-87da-5bc767246032' , 'ext_c31cce87-3db4-4bb4-8fef-10ebefa11c49' , 'ext_ca945461-0fa1-4ceb-8aaf-0c18c5880819' , 'global' )) AND (("head"."widgets".body#>>'{extensionZoneCode}') IN ( 'root' )))
2025-10-10 13:18:54 UTC [9211-92] 127.0.0.1(36180) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:54 UTC [9231-170] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [935-2681] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:18:54 UTC [9231-171] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [9231-172] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [9231-173] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [9231-174] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [1173-162] 127.0.0.1(54634) elma365@elma365 LOG:  statement: -- ping
2025-10-10 13:18:54 UTC [1173-163] 127.0.0.1(54634) elma365@elma365 LOG:  statement: SELECT quota FROM quotas WHERE key =  'quota_cluster_default_heavyquery_commercial' 
2025-10-10 13:18:54 UTC [9231-175] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [9231-176] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [9211-93] 127.0.0.1(36180) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:18:54 UTC [9211-94] 127.0.0.1(36180) elma365@elma365 LOG:  statement: SELECT body FROM "head"."widgets" WHERE "body"->>'namespace' =  'ext_8c227577-684e-44cf-87da-5bc767246032'  AND "body"->>'code' =  'root_widget'  AND "body"->>'__deletedAt' IS NULL
2025-10-10 13:18:54 UTC [9211-95] 127.0.0.1(36180) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:54 UTC [9211-96] 127.0.0.1(36180) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:18:54 UTC [9211-97] 127.0.0.1(36180) elma365@elma365 LOG:  statement: SELECT body FROM "head"."widgets_snapshots" WHERE id =  '3d271406-f158-5c1b-b13e-a6b8cf57e7c0' 
2025-10-10 13:18:54 UTC [1174-185] 127.0.0.1(54644) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:54 UTC [1174-186] 127.0.0.1(54644) elma365@elma365 LOG:  statement: SET application_name='widget';
2025-10-10 13:18:54 UTC [1174-187] 127.0.0.1(54644) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:18:54 UTC [9262-35] 127.0.0.1(41962) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:54 UTC [9262-36] 127.0.0.1(41962) elma365@elma365 LOG:  statement: SET application_name='widget';
2025-10-10 13:18:54 UTC [9262-37] 127.0.0.1(41962) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:18:54 UTC [1174-188] 127.0.0.1(54644) elma365@elma365 LOG:  statement: SELECT body FROM "head"."widgets" WHERE "body"->>'namespace' =  'ext_c31cce87-3db4-4bb4-8fef-10ebefa11c49'  AND "body"->>'code' =  'markdown_editor'  AND "body"->>'__deletedAt' IS NULL
2025-10-10 13:18:54 UTC [9211-98] 127.0.0.1(36180) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:54 UTC [9262-38] 127.0.0.1(41962) elma365@elma365 LOG:  statement: SELECT body FROM "head"."widgets" WHERE "body"->>'namespace' =  'ext_ab4e8797-6ecc-4134-bda9-0e6f16afd05a'  AND "body"->>'code' =  'inicializaciya_modulya_only_office'  AND "body"->>'__deletedAt' IS NULL
2025-10-10 13:18:54 UTC [1174-189] 127.0.0.1(54644) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:54 UTC [1174-190] 127.0.0.1(54644) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:18:54 UTC [9262-39] 127.0.0.1(41962) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:54 UTC [1174-191] 127.0.0.1(54644) elma365@elma365 LOG:  statement: SELECT body FROM "head"."widgets_snapshots" WHERE id =  '53e1187f-ff60-5e1e-83fc-843caae0f20c' 
2025-10-10 13:18:54 UTC [9262-40] 127.0.0.1(41962) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:18:54 UTC [9262-41] 127.0.0.1(41962) elma365@elma365 LOG:  statement: SELECT body FROM "head"."widgets_snapshots" WHERE id =  'e5f9226a-324a-5b93-bfec-e2b497a7cb69' 
2025-10-10 13:18:54 UTC [1174-192] 127.0.0.1(54644) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:54 UTC [9262-42] 127.0.0.1(41962) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:54 UTC [1148-313] 127.0.0.1(54616) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:54 UTC [1148-314] 127.0.0.1(54616) elma365@elma365 LOG:  statement: SET application_name='diskjockey';
2025-10-10 13:18:54 UTC [1148-315] 127.0.0.1(54616) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:18:54 UTC [1148-316] 127.0.0.1(54616) elma365@elma365 LOG:  statement: SELECT (body) FROM "head"."disk_files@directory" WHERE (body->>'directory') =  '8c227577-684e-44cf-87da-5bc767246032'  AND (body->>'__name') =  '67698d44-0a99-52c2-86d4-e0084affc24c' 
2025-10-10 13:18:54 UTC [9204-71] 127.0.0.1(36134) elma365@elma365 LOG:  statement: select 1
2025-10-10 13:18:54 UTC [9204-72] 127.0.0.1(36134) elma365@elma365 LOG:  statement: SET application_name='diskjockey';
2025-10-10 13:18:54 UTC [9204-73] 127.0.0.1(36134) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:18:54 UTC [9204-74] 127.0.0.1(36134) elma365@elma365 LOG:  statement: SELECT (body) FROM "head"."disk_files@directory" WHERE (body->>'directory') =  'ab4e8797-6ecc-4134-bda9-0e6f16afd05a'  AND (body->>'__name') =  '67698d44-0a99-52c2-86d4-e0084affc24c' 
2025-10-10 13:18:54 UTC [1148-317] 127.0.0.1(54616) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:54 UTC [1148-318] 127.0.0.1(54616) elma365@elma365 LOG:  statement: SELECT body FROM "head"."disk_files" WHERE (body#>>'{directory}') =  '0199c7e6-310c-758a-a10a-64e689a54596'  AND (body#>>'{__name}') =  'ru-RU.po'  AND (body#>>'{__deletedAt}') IS NULL
2025-10-10 13:18:54 UTC [9204-75] 127.0.0.1(36134) elma365@elma365 LOG:  statement: rollback
2025-10-10 13:18:54 UTC [1148-319] 127.0.0.1(54616) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:18:54 UTC [9204-76] 127.0.0.1(36134) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:18:54 UTC [1148-320] 127.0.0.1(54616) elma365@elma365 LOG:  statement: SELECT (body) FROM "head"."disk_files@directory" WHERE (body->>'directory') =  'cce04b5b-507b-5025-82c8-5555a1b8e8ff'  AND (body->>'__name') =  '67698d44-0a99-52c2-86d4-e0084affc24c' 
2025-10-10 13:18:54 UTC [9204-77] 127.0.0.1(36134) elma365@elma365 LOG:  statement: SELECT (body) FROM "head"."disk_files@directory" WHERE (body->>'directory') =  'cce04b5b-507b-5025-82c8-5555a1b8e8ff'  AND (body->>'__name') =  '67698d44-0a99-52c2-86d4-e0084affc24c' 
2025-10-10 13:18:54 UTC [1148-321] 127.0.0.1(54616) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:54 UTC [9204-78] 127.0.0.1(36134) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:54 UTC [1148-322] 127.0.0.1(54616) elma365@elma365 LOG:  statement: SELECT body FROM "head"."disk_files" WHERE (body#>>'{directory}') =  '0198f5b6-109f-760f-9710-91e9a158ba2e'  AND (body#>>'{__name}') =  'ru-RU.po'  AND (body#>>'{__deletedAt}') IS NULL
2025-10-10 13:18:54 UTC [9204-79] 127.0.0.1(36134) elma365@elma365 LOG:  statement: SELECT body FROM "head"."disk_files" WHERE (body#>>'{directory}') =  '0198f5b6-109f-760f-9710-91e9a158ba2e'  AND (body#>>'{__name}') =  'ru-RU.po'  AND (body#>>'{__deletedAt}') IS NULL
2025-10-10 13:18:54 UTC [9231-177] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:54 UTC [9382-69] 127.0.0.1(37310) elma365@elma365 LOG:  statement: begin isolation level read committed read only
2025-10-10 13:18:54 UTC [9382-70] 127.0.0.1(37310) elma365@elma365 LOG:  statement: SELECT id, body || jsonb_build_object('_id', id) as "body" FROM "head"."settings" WHERE id =ANY ( '{2bd76aca-2c59-488c-a289-0b5be0c00da2,00000000-0000-0000-0000-000000000000}' )
2025-10-10 13:18:54 UTC [9382-71] 127.0.0.1(37310) elma365@elma365 LOG:  statement: commit
2025-10-10 13:18:54 UTC [1175-385] 127.0.0.1(54658) elma365@elma365 LOG:  statement: DISCARD ALL
2025-10-10 13:18:54 UTC [9231-178] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:55 UTC [9231-179] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:55 UTC [935-2682] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:18:55 UTC [9231-180] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:55 UTC [9231-181] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE name =  'head'  ORDER BY created_at DESC
2025-10-10 13:18:56 UTC [935-2683] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:18:56 UTC [869-275] [local] postgres@postgres LOG:  statement: SELECT CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), 0, CASE WHEN latest_end_lsn IS NULL THEN NULL ELSE received_tli END, slot_name, conninfo, status, pg_catalog.current_setting('restore_command'), (SELECT pg_catalog.json_agg(s.*) FROM (SELECT slot_name, slot_type as type, datoid::bigint, plugin, catalog_xmin, pg_catalog.pg_wal_lsn_diff(confirmed_flush_lsn, '0/0')::bigint AS confirmed_flush_lsn, pg_catalog.pg_wal_lsn_diff(restart_lsn, '0/0')::bigint AS restart_lsn, xmin FROM pg_catalog.pg_get_replication_slots()) AS s), 'on', '', NULL FROM pg_catalog.pg_stat_get_wal_receiver()
2025-10-10 13:18:57 UTC [935-2684] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:18:58 UTC [935-2685] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:18:59 UTC [1076-270] 192.168.39.17(13858) elma365@audit LOG:  statement: SELECT 1
2025-10-10 13:18:59 UTC [935-2686] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:00 UTC [935-2687] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:01 UTC [935-2688] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:02 UTC [935-2689] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:03 UTC [830-7]  LOG:  checkpoint starting: time
2025-10-10 13:19:03 UTC [935-2690] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:03 UTC [9231-182] 127.0.0.1(36316) elma365@elma365 LOG:  statement: -- ping
2025-10-10 13:19:03 UTC [9231-183] 127.0.0.1(36316) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE status IN ( 'active' , 'extended' ) AND type <>  'inner' 
2025-10-10 13:19:04 UTC [935-2691] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:04 UTC [1175-386] 127.0.0.1(54658) elma365@elma365 LOG:  statement: SET application_name='deploy';
2025-10-10 13:19:04 UTC [1175-387] 127.0.0.1(54658) elma365@elma365 LOG:  statement: SELECT id, created_at, alive_until, status_reason, updated_at, kind, sync, timeout, payload, status FROM migrations_tasks WHERE status in ( 'canceling' )
2025-10-10 13:19:05 UTC [935-2692] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:06 UTC [9397-73] 127.0.0.1(51110) elma365@elma365 LOG:  statement: DISCARD ALL
2025-10-10 13:19:06 UTC [935-2693] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:06 UTC [869-276] [local] postgres@postgres LOG:  statement: SELECT CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), 0, CASE WHEN latest_end_lsn IS NULL THEN NULL ELSE received_tli END, slot_name, conninfo, status, pg_catalog.current_setting('restore_command'), (SELECT pg_catalog.json_agg(s.*) FROM (SELECT slot_name, slot_type as type, datoid::bigint, plugin, catalog_xmin, pg_catalog.pg_wal_lsn_diff(confirmed_flush_lsn, '0/0')::bigint AS confirmed_flush_lsn, pg_catalog.pg_wal_lsn_diff(restart_lsn, '0/0')::bigint AS restart_lsn, xmin FROM pg_catalog.pg_get_replication_slots()) AS s), 'on', '', NULL FROM pg_catalog.pg_stat_get_wal_receiver()
2025-10-10 13:19:07 UTC [935-2694] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:08 UTC [935-2695] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:09 UTC [935-2696] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:10 UTC [935-2697] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:11 UTC [1076-271] 192.168.39.17(13858) elma365@audit LOG:  statement: SELECT 1
2025-10-10 13:19:11 UTC [935-2698] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:12 UTC [935-2699] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:13 UTC [935-2700] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:14 UTC [1076-272] 192.168.39.17(13858) elma365@audit LOG:  statement: SELECT 1
2025-10-10 13:19:14 UTC [935-2701] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:15 UTC [935-2702] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:16 UTC [9230-132] 127.0.0.1(36306) elma365@elma365 LOG:  statement: -- ping
2025-10-10 13:19:16 UTC [9230-133] 127.0.0.1(36306) elma365@elma365 LOG:  statement: SELECT name, alias, owner, owner_email, created_at, updated_at, expire_at, type, status, description FROM companies WHERE status IN ( 'active' , 'extended' ) AND type <>  'inner' 
2025-10-10 13:19:16 UTC [9397-74] 127.0.0.1(51110) elma365@elma365 LOG:  statement: SET application_name='picasso';
2025-10-10 13:19:16 UTC [9397-75] 127.0.0.1(51110) elma365@elma365 LOG:  statement: -- ping
2025-10-10 13:19:16 UTC [9397-76] 127.0.0.1(51110) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:19:16 UTC [9397-77] 127.0.0.1(51110) elma365@elma365 LOG:  statement: UPDATE "head"."users_public_certs" SET body = jsonb_set(body, '{lastSyncTime}', to_jsonb( '2025-10-10 13:19:16.139528Z' ::timestamptz)) WHERE id in ( SELECT id FROM "head"."users_public_certs" WHERE (body#>>'{cert_status}') IN ( 'preparing' , 'validating' , 'correction' , 'identification_running' , 'identification_finished' , 'approved' , 'releasing' ) ORDER BY (body->>'lastSyncTime')::timestamp asc LIMIT 10 ) returning body
2025-10-10 13:19:16 UTC [9397-78] 127.0.0.1(51110) elma365@elma365 LOG:  statement: commit
2025-10-10 13:19:16 UTC [9397-79] 127.0.0.1(51110) elma365@elma365 LOG:  statement: SELECT to_regclass('"head"."digital_sign_accounts"') as name;
2025-10-10 13:19:16 UTC [9397-80] 127.0.0.1(51110) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:19:16 UTC [9397-81] 127.0.0.1(51110) elma365@elma365 LOG:  statement: UPDATE "head"."digital_sign_accounts" SET body = jsonb_set(body, '{sync_date}', to_jsonb( '2025-10-10 13:19:16.148932Z' ::timestamptz)) WHERE id in ( SELECT id FROM "head"."digital_sign_accounts" WHERE (body#>>'{status}') =  'wait'  ORDER BY (body->>'sync_date')::timestamp asc LIMIT 10 ) returning body
2025-10-10 13:19:16 UTC [9397-82] 127.0.0.1(51110) elma365@elma365 LOG:  statement: commit
2025-10-10 13:19:16 UTC [9397-83] 127.0.0.1(51110) elma365@elma365 LOG:  statement: begin isolation level read committed read write
2025-10-10 13:19:16 UTC [9397-84] 127.0.0.1(51110) elma365@elma365 LOG:  statement: UPDATE "head"."digital_signs" SET body = jsonb_set(body, '{lastSyncTime}', to_jsonb( '2025-10-10 13:19:16.153787Z' ::timestamptz)) WHERE id in ( SELECT id FROM "head"."digital_signs" WHERE (body#>>'{operation_status}') IN ( 'enqueued' , 'in_progress' , 'awaiting_for_confirmation' ) ORDER BY (body->>'lastSyncTime')::timestamp asc LIMIT 10 ) returning body
2025-10-10 13:19:16 UTC [9397-85] 127.0.0.1(51110) elma365@elma365 LOG:  statement: commit
2025-10-10 13:19:16 UTC [935-2703] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:16 UTC [869-277] [local] postgres@postgres LOG:  statement: SELECT CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), 0, CASE WHEN latest_end_lsn IS NULL THEN NULL ELSE received_tli END, slot_name, conninfo, status, pg_catalog.current_setting('restore_command'), (SELECT pg_catalog.json_agg(s.*) FROM (SELECT slot_name, slot_type as type, datoid::bigint, plugin, catalog_xmin, pg_catalog.pg_wal_lsn_diff(confirmed_flush_lsn, '0/0')::bigint AS confirmed_flush_lsn, pg_catalog.pg_wal_lsn_diff(restart_lsn, '0/0')::bigint AS restart_lsn, xmin FROM pg_catalog.pg_get_replication_slots()) AS s), 'on', '', NULL FROM pg_catalog.pg_stat_get_wal_receiver()
2025-10-10 13:19:17 UTC [9222-314] 127.0.0.1(36256) elma365@elma365 LOG:  statement: DISCARD ALL
2025-10-10 13:19:17 UTC [9213-74] 127.0.0.1(36186) elma365@elma365 LOG:  statement: DISCARD ALL
2025-10-10 13:19:17 UTC [935-2704] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
2025-10-10 13:19:18 UTC [935-2705] [local] postgres@postgres LOG:  statement: SELECT pg_catalog.pg_postmaster_start_time(), CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE ('x' || pg_catalog.substr(pg_catalog.pg_walfile_name(pg_catalog.pg_current_wal_lsn()), 1, 8))::bit(32)::int END, CASE WHEN pg_catalog.pg_is_in_recovery() THEN 0 ELSE pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_current_wal_flush_lsn(), '0/0')::bigint END, pg_catalog.pg_wal_lsn_diff(pg_catalog.pg_last_wal_replay_lsn(), '0/0')::bigint, pg_catalog.pg_wal_lsn_diff(COALESCE(pg_catalog.pg_last_wal_receive_lsn(), '0/0'), '0/0')::bigint, pg_catalog.pg_is_in_recovery() AND pg_catalog.pg_is_wal_replay_paused(), pg_catalog.pg_last_xact_replay_timestamp(), (pg_catalog.pg_stat_get_wal_receiver()).status, pg_catalog.current_setting('restore_command'), pg_catalog.array_to_json(pg_catalog.array_agg(pg_catalog.row_to_json(ri))) FROM (SELECT (SELECT rolname FROM pg_catalog.pg_authid WHERE oid = usesysid) AS usename, application_name, client_addr, w.state, sync_state, sync_priority FROM pg_catalog.pg_stat_get_wal_senders() w, pg_catalog.pg_stat_get_activity(pid)) AS ri
