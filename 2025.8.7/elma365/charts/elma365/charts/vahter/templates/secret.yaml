{{- $cn := printf "%s" .Values.global.host }}
{{- $ca := genCA "elma365-ca" 365 -}}
{{- $cert := genSignedCert $cn nil nil 365 $ca -}}
{{- $oldTokenExpiryISO := .Values.secrets.renewToken.oldTokenExpiry | toDate "2006-01-02" }}
{{- $oldTokenExpiry := $oldTokenExpiryISO.Unix | int }}
{{- $nowTimestampISO := now.Format "2006-01-02T00:00:00Z" | toDate "2006-01-02T00:00:00Z" }}
{{- $nowTimestamp := $nowTimestampISO.Unix | int }}

{{- $defaultSA := (lookup "v1" "ServiceAccount" .Release.Namespace "default") -}}
{{- $isHelm := $defaultSA -}}

{{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace "vahter-jwt") -}}

{{- $shouldGenerate := and 
  $isHelm
  (not (.Values.global.autoGenerationJwtDisabled | default false))
  (eq .Values.global.solution "onPremise")
  (not $existingSecret)
-}}
# JWT secret
kind: Secret
apiVersion: v1
type: tls
data:
  {{- if $shouldGenerate }}
  tls.key: {{ $cert.Key | b64enc }}
  tls.crt: {{ $cert.Cert | b64enc }}
  {{- else if $existingSecret }}
  tls.key: {{ print (index $existingSecret.data "tls.key") }}
  tls.crt: {{ print (index $existingSecret.data "tls.crt") }}
  {{- else }}
  # manual generation, provide values ​​in vahter, then restart vahter services
  # openssl genrsa -out jwtTls.key 4096 && openssl req -new -key jwtTls.key -nodes -x509 -sha256 -days 365 \
  #         -subj "/C=RU/O=ELMA365/CN=MYDOMAIN.COM" -addext "subjectAltName = DNS:MYDOMAIN.COM" -out jwtTls.crt
  tls.key: {{ .Values.secrets.tls.key | b64enc }}
  tls.crt: {{ .Values.secrets.tls.cert | b64enc }}
  {{- end }}
  {{- if eq (toString .Values.secrets.renewToken.enabled) "true" }}
  {{- if and ( not ( eq .Values.secrets.renewToken.keyNew "" )) ( not ( eq .Values.secrets.renewToken.certNew  "" )) }}
  {{- if le $nowTimestamp $oldTokenExpiry }}
  tls_new.key: {{ .Values.secrets.renewToken.keyNew | b64enc }}
  tls_new.crt: {{ .Values.secrets.renewToken.certNew | b64enc }}
  {{- end }}
  {{- end }}
  {{- end }}
metadata:
  name: vahter-jwt
  labels:
    {{- include "vahter.labels" . | nindent 4 }}
  annotations:
    {{- if eq (toString .Values.secrets.renewToken.enabled) "true" }}
    {{- if and ( not ( eq .Values.secrets.renewToken.keyNew "" )) ( not ( eq .Values.secrets.renewToken.certNew  "" )) }}
    {{- if le $nowTimestamp $oldTokenExpiry }}
    old-token-expiry: {{ $oldTokenExpiry | quote }}
    checksum/self: {{ include "vahter.jwtSecretChecksum" . | quote }}
    argocd.argoproj.io/ignore-differences: |
      jsonPointers:
      - /data/tls_new.key
      - /data/tls_new.crt
      - /metadata/annotations/old-token-expiry
    {{- end }}
    {{- end }}
    {{- end }}
