# -- Настройки monitoring
kube-prometheus-stack:
  tolerations:
    - key: "node-role.kubernetes.io/control-plane"
      operator: "Exists"
      effect: "NoSchedule"
  # -- Настройки grafana
  grafana:
    tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
    assertNoLeakedSecrets: false
    # -- адрес по которому будет доступна grafana
    ingress:
      enabled: true
      ingressClassName: nginx
      hosts:
        - grafana.vps.elewise.com
      # -- настройка tls
      # tls: 
      #   - secretName: "mycompany-cert"
      #     hosts:
      #       - grafana.mycompany.com
      annotations: {}
    # -- учетные данные администратора
    adminUser: admin
    adminPassword: admin
    # -- список используемых плагинов
    plugins:
    - camptocamp-prometheus-alertmanager-datasource
    - flant-statusmap-panel
    - vonage-status-panel
    sidecar:
      # -- включить mimir в качестве источника данных
      # datasources:
      #   enabled: true
      #   defaultDatasourceEnabled: true
      #   isDefaultDatasource: true
      #   uid: prometheus
      #   url: http://mimir-nginx:80/prometheus
      dashboards:
        enabled: true
        label: "grafana_dashboard"
        labelValue: ""
        annotations:
          grafana-dashboard-folder: /tmp/dashboards/Main
        folderAnnotation: grafana-dashboard-folder
        provider:
          allowUiUpdates: true
          foldersFromFilesStructure: true
      ## параметры подключения к приватному registry
      image:
      # адрес и путь для приватного registry
        registry: hub.elma365.tech/docker/addons
        repository: kiwigrid/k8s-sidecar
        tag: 1.27.4
      #   pullPolicy: IfNotPresent
    image:
      registry: hub.elma365.tech/docker/addons
      repository: grafana/grafana
      tag: "11.2.0"
      # sha: ""
      # pullPolicy: IfNotPresent
      # pullSecrets: []
    initChownData:
      enabled: true
      image:
        registry: hub.elma365.tech/docker/addons
        tag: "1.31.1"
        # pullPolicy: IfNotPresent

  # -- Настройки prometheus
  prometheus:
    prometheusSpec:
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      resources:
        requests:
          cpu: 1200m
          memory: 1200Mi
        limits:
          cpu: 2
          memory: 2Gi
      # -- включить mimir в качестве долгосрочного хранилища
      # remoteWrite:
      # - url: http://mimir-nginx:80/api/v1/push
      replicas: 1
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      scrapeConfigSelectorNilUsesHelmValues: false
      scrapeInterval: 30s
      evaluationInterval: 30s
      ## -- Как долго хранить метрики
      retention: 7d
      ## -- Максимальный размер метрик
      retentionSize: ""
      addtitionalScrapeConfigs:
        - job_name: minio-job-prometheus
          metrics_path: /minio/v2/metrics/cluster
          scheme: http
          static_configs:
            - targets: ['master.sale.elewise.com:9000']
          bearer_token: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJwcm9tZXRoZXVzIiwic3ViIjoiZWxtYTM2NXVzZXIiLCJleHAiOjQ5MTA2NzU4OTR9.Q3Dcd6i81Ep3KmyXlZ04LJd3twcv0JzCIeIQ2kirthi_kiKnTkJ4jjS0AshbDhYahKy07Hl-bN77LaZ-Mn3nlg
        # scrape_configs:
      # - job_name: minio-job
      #   bearer_token: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJwcm9tZXRoZXVzIiwic3ViIjoiZWxtYTM2NXVzZXIiLCJleHAiOjQ5MTA2NzU4OTR9.Q3Dcd6i81Ep3KmyXlZ04LJd3twcv0JzCIeIQ2kirthi_kiKnTkJ4jjS0AshbDhYahKy07Hl-bN77LaZ-Mn3nlg
      #   metrics_path: /minio/v2/metrics/cluster
      #   scheme: https
      #   static_configs:
      #   - targets: ['master.sale.elewise.com:9000']

  global:
    imageRegistry: "hub.elma365.tech/docker/addons"
    imagePullSecrets: []

  alertmanager:
    enabled: false
  # -- Настройки exporter
  exporters:
    kubeScheduler:
      enabled: false
    kubeControllerManager:
      enabled: false
  
  # Настройки promethus-node-exporter
  prometheus-node-exporter:
    # node selector + tolerations
    tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"  
    