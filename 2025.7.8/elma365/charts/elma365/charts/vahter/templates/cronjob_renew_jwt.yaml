{{- $oldTokenExpiryISO := .Values.secrets.renewToken.oldTokenExpiry | toDate "2006-01-02" }}
{{- $oldTokenExpiry := $oldTokenExpiryISO.Unix | int }}
{{- $nowTimestampISO := now.Format "2006-01-02T00:00:00Z" | toDate "2006-01-02T00:00:00Z" }}
{{- $nowTimestamp := $nowTimestampISO.Unix | int }}
{{- if eq (toString .Values.secrets.renewToken.enabled) "true" }}
{{- if and ( not ( eq .Values.secrets.renewToken.keyNew "" )) ( not ( eq .Values.secrets.renewToken.certNew  "" )) }}
{{- if le $nowTimestamp $oldTokenExpiry }}
{{- $serviceName := include "vahter.name" . -}}
{{- if semverCompare ">=1.21-0" (include "kubeVersion" .) -}}
apiVersion: batch/v1
{{- else -}}
apiVersion: batch/v1beta1
{{- end }}
kind: CronJob
metadata:
  name: {{ $serviceName }}-renew-jwt
  labels:
    app: {{ $serviceName }}
    tier: elma365
    chart: {{ template "vahter.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 0
  startingDeadlineSeconds: {{ default 300 .Values.global.cronStartingDeadlineSeconds }}
  concurrencyPolicy: Replace
  schedule: {{ .Values.secrets.renewToken.schedule | quote }}
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: {{ default 300 .Values.global.cronTtlSecondsAfterFinished }}
      activeDeadlineSeconds: {{ default 120 .Values.global.cronActiveDeadlineSeconds }}
      template:
        metadata:
          labels:
            job: renew-jwt-vahter
            tier: elma365
            sidecar.istio.io/inject: "false"
          annotations:
            linkerd.io/inject: disabled
        spec:
          serviceAccountName: {{ $serviceName }}-internal-kubectl
          {{- if .Values.global.helmLibrary }}
          securityContext:
            {{- include "helm-library.job.podSecurityContext" . | nindent 12 }}
          {{- include "helm-library.deployment.scheduling" . | indent 10 }}
          {{- end }}
          imagePullSecrets:
          {{- range .Values.global.image.pullSecret }}
            - name: {{ . }}
          {{- end }}
          containers:
            - name: renew-jwt
              image: "{{ $.Values.global.image.repository }}/docker/toolkit/sh-curl-kubectl:alpine3.20"
              imagePullPolicy: {{ .Values.global.image.pullPolicy }}
              command: ["sh", "-c"]
              args:
                - |
                  expiryTimestamp=$(kubectl get secret vahter-jwt -o jsonpath='{.metadata.annotations.old-token-expiry}')
                  if [ -n "$expiryTimestamp" ]; then
                    nowTimestamp=$(date +%s)
                    startOfDay() {
                      formattedDate=$(date -d "@$1" +"%Y %m %d 00 00 00")
                      awk -v date="$formattedDate" 'BEGIN { print mktime(date) }'
                    }
                    expiryDayStart=$(startOfDay $expiryTimestamp)
                    currentDayStart=$(startOfDay $nowTimestamp)
                    if [ "$currentDayStart" -eq "$expiryDayStart" ]; then
                      certNewEncoded=$(kubectl get secret vahter-jwt -o jsonpath='{.data.tls_new\.crt}')
                      kubectl patch secret vahter-jwt --type='json' -p="[{\"op\": \"add\", \"path\": \"/data/tls.crt\", \"value\": \"$certNewEncoded\"}]"
                      keyNewEncoded=$(kubectl get secret vahter-jwt -o jsonpath='{.data.tls_new\.key}')
                      kubectl patch secret vahter-jwt --type='json' -p="[{\"op\": \"add\", \"path\": \"/data/tls.key\", \"value\": \"$keyNewEncoded\"}]"
                      kubectl patch secret vahter-jwt --type='json' -p='[{"op": "remove", "path": "/data/tls_new.crt"}]'
                      kubectl patch secret vahter-jwt --type='json' -p='[{"op": "remove", "path": "/data/tls_new.key"}]'
                      kubectl patch secret vahter-jwt --type='json' -p='[{"op": "remove", "path": "/metadata/annotations/old-token-expiry"}]'
                      kubectl rollout restart deployment/vahter
                    else
                      echo "Time has not come yet"
                    fi
                  fi
            {{- if .Values.global.helmLibrary }}
              securityContext:
                {{- include "helm-library.job.securityContext" . | nindent 16 }}
              {{- include "helm-library.cronjobs.resources" . | indent 14 }}
            {{- end }}
          restartPolicy: OnFailure
{{- end }}
{{- end }}
{{- end }}
