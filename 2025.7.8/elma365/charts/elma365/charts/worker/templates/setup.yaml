{{- $oldPoolCfgExists := "false" }}

{{- $workerPoolConfigMapName := "" }}
{{- $workerPoolConfigFileName := "" }}
{{- if .Values.global.helmLibrary }}
  {{- $workerPoolConfigMapName = include "helm-library.worker-pool.config-map-name" . }}
  {{- $workerPoolConfigFileName = include "helm-library.worker-pool.config-file-name" . }}
{{- end }}

{{- $configMap := lookup "v1" "ConfigMap" .Release.Namespace (default "" $workerPoolConfigMapName)}}
{{- if $configMap }}
  {{- $oldPoolCfgExists = "true" }}
{{- end }}
{{- $newPoolCfgExists := "false" }}
{{- if .Values.global.helmLibrary }}
{{- $enabled := include "helm-library.worker-pool.enabled" . }}
{{- if $enabled }}
  {{- $newPoolCfgExists = "true" }}
{{- end }}
{{- end }}

apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Chart.Name }}-setup-{{ .Values.images.setup | lower }}"
  labels:
  {{- include "worker.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "1"
spec:
  backoffLimit: {{ .Values.global.backoffLimit }}
{{- if .Values.global.setupJobTtlSecondsAfterFinished }}
  ttlSecondsAfterFinished: {{ .Values.global.setupJobTtlSecondsAfterFinished }}
{{- end }}
  template:
    metadata:
      labels:
        sidecar.istio.io/inject: "false"
      annotations:
        linkerd.io/inject: disabled
    spec:
      {{- if .Values.global.helmLibrary }}
      securityContext:
        {{- include "helm-library.job.podSecurityContext" . | nindent 8 }}
      {{- include "helm-library.deployment.scheduling" . | indent 6 }}
      {{- end }}
      restartPolicy: OnFailure
      imagePullSecrets:
      {{- if .Values.image.pullSecret }}
      {{- range .Values.image.pullSecret }}
      - name: {{ . }}
      {{- end }}
      {{- else }}
      {{- range .Values.global.image.pullSecret }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      containers:
        - name: setup
          image: "{{ .Values.image.repository | default .Values.global.image.repository }}/elma365/serv_worker/setup:{{ .Values.images.setup }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          env:
            - name: SCRIPT_EXCHANGE
              value: {{ .Values.appconfig.scriptExchange | default "script" | quote }}
            - name: SCRIPT_ALTERNATE_EXCHANGE
              value: {{ .Values.appconfig.scriptAlternateExchange | default "script-default" | quote }}
            {{- if eq $newPoolCfgExists "true" }}
            - name: SCRIPT_POOL_CFG_NEW
              value: {{ .Values.global.workerPoolCfg | toJson | quote }}
            {{- end }}
            {{- if and $configMap $workerPoolConfigMapName $workerPoolConfigFileName }}
            - name: SCRIPT_POOL_CFG_OLD
              valueFrom:
                configMapKeyRef:
                  name: {{ $workerPoolConfigMapName | quote }}
                  key: {{ $workerPoolConfigFileName | quote }}
            {{- end }}
            - name: ELMA365_LOG_LEVEL
              value: "debug"
          envFrom:
            - configMapRef:
                name: elma365-env-config
                optional: true
            - secretRef:
                name: elma365-db-connections
                optional: true
        {{- if .Values.global.helmLibrary }}
          securityContext:
            {{- include "helm-library.job.securityContext" . | nindent 12 }}
          {{- include "helm-library.job.resources" . | indent 10 }}
        {{- end }}
